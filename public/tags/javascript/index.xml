<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Max Kovalevskii (MKVL)</title>
    <link>http://localhost:1313/tags/javascript/</link>
    <description>Recent content in Javascript on Max Kovalevskii (MKVL)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 16 Jul 2021 04:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What Is Strict Mode In TypeScript, Why And When You Should Use It?</title>
      <link>http://localhost:1313/what-is-strict-mode-in-typescript-and-why-and-when-you-should-use-it/</link>
      <pubDate>Fri, 16 Jul 2021 04:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/what-is-strict-mode-in-typescript-and-why-and-when-you-should-use-it/</guid>
      <description>There are many options and parameters that can be used in the TypeScript configuration. One of the important &amp;ldquo;groups&amp;rdquo; of options is strict options. These options provide us the ability to write the safest code. How? Because TypeScript was developed primarily as superset of JavaScript, by default it allows us to write code that is not super strict in types and other aspects. It was made like this because TypeScript should be easily used by JavaScript developers.</description>
      
        
            <type>blog post</type>
        
      
      
      
    </item>
    
    <item>
      <title>Next.js</title>
      <link>http://localhost:1313/next.js/</link>
      <pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/next.js/</guid>
      <description>Next.js Next.js is a React full stack framework. It provides an ability to develop applications with server-side rendering and also can be used as a Static Site Generator.
Creating a Next.js application (with TypeScript) For creating a Next.js application you need install Node and npm on your machine. if you didn&amp;rsquo;t do it before check out the post How To Install or Update Node by Using nvm (Node Version Manager).</description>
      
        
            <type>note</type>
        
      
      
      
    </item>
    
    <item>
      <title>Configuring TypeScript: options rootDir, outDir, module, target</title>
      <link>http://localhost:1313/configuring-typescript-options-rootdir-outdir-module-target/</link>
      <pubDate>Tue, 18 May 2021 20:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/configuring-typescript-options-rootdir-outdir-module-target/</guid>
      <description>In the post Getting Started With TypeScript Compiler (tsc) we started to use TypeScript compiler with a few options in a simple Node project. We used tsc command to compile our app with specific rules and in watch mode. It works but we can use much more options of TypeScript compiler. However, use it just like a command in the Terminal with a bunch of flags is not so comfortable. We can improve our workflow by using TypeScript configuration file - tsconfig.</description>
      
        
            <type>blog post</type>
        
      
      
      
    </item>
    
    <item>
      <title>Getting Started With TypeScript Compiler (tsc)</title>
      <link>http://localhost:1313/getting-started-using-and-configuring-typescript-compiler/</link>
      <pubDate>Sun, 16 May 2021 20:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/getting-started-using-and-configuring-typescript-compiler/</guid>
      <description>From the previous post TypeScript - What Is All About And Why Should You Use It? we know that TypeScript is a superset of JavaScript and programming language. But how can you use it? If you worked with JavaScript in Front End you know that your code is executing by Web browser. In Back End, your code is running by Node. What about TypeScript?
The thing is that TypeScript is provided with a special program, tool - compiler.</description>
      
        
            <type>blog post</type>
        
      
      
      
    </item>
    
    <item>
      <title>Angular</title>
      <link>http://localhost:1313/angular/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/angular/</guid>
      <description> Angular A TypeScript framework for building Front End web applications.
Links angular.io GitHub </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Babel</title>
      <link>http://localhost:1313/babel/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/babel/</guid>
      <description> Babel A JavaScript compiler. Compilers modern JavaScript or TypeScript code to one that supports by target environment (old Web browser, etc).
Links babeljs.io GitHub </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>CommonJS Modules</title>
      <link>http://localhost:1313/commonjs-modules/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/commonjs-modules/</guid>
      <description> CommonJS Modules Module system for JavaScript that uses in Node.
The syntax:
1 2 3 4 5 6 7 const fs = require(&amp;#39;fs&amp;#39;); function foo() { // ... } exports.foo = foo; Links Node.js Docs Wikipedia </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>ES Modules</title>
      <link>http://localhost:1313/es-modules/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/es-modules/</guid>
      <description> ES Modules Module system in ECMAScript standard JavaScript.
An example:
1 2 3 4 5 6 7 8 import { foo } from &amp;#39;first-module&amp;#39;; import * as all from &amp;#39;second-module&amp;#39;; export const SPECIAL_CHAR = &amp;#34;*&amp;#34;; export function anotherFoo() { // ... } Links Node.js Docs ES modules: A cartoon deep-dive </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Setup Simple Workflow To Write Node TypeScript Application In Live Reload (Nodemon, ts-node)</title>
      <link>http://localhost:1313/setup-simple-workflow-to-write-node-typescript-application-in-live-reload/</link>
      <pubDate>Wed, 12 May 2021 22:10:00 +0000</pubDate>
      
      <guid>http://localhost:1313/setup-simple-workflow-to-write-node-typescript-application-in-live-reload/</guid>
      <description>In this post, we will learn how to set up a Node project with TypeScript. It is not based on any framework or library like Fastify, Express, Nest, etc. Let&amp;rsquo;s say you wanna build just a command-line application by using TypeScript and Node.
First of all, you need to install TypeScript on your computer. Install it by npm or Yarn globally.
1 npm i -g typescript I&amp;rsquo;m sure you already installed Node on your computer but maybe you need to update your version.</description>
      
        
            <type>blog post</type>
        
      
      
      
    </item>
    
    <item>
      <title>nodemon</title>
      <link>http://localhost:1313/nodemon/</link>
      <pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/nodemon/</guid>
      <description> nodemon nodemon is a tool that restarts your Node application when some file changes. It really helps in developing because you don&amp;rsquo;t need to re-run Node if you change code in your application.
Links GitHub nodemon.io </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>What Are Type Declaration Files In TypeScript?</title>
      <link>http://localhost:1313/what-are-type-declaration-files-in-typescript/</link>
      <pubDate>Tue, 11 May 2021 20:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/what-are-type-declaration-files-in-typescript/</guid>
      <description>You probably have seen files with a file extension like .d.ts in some JavaScript or TypeScript projects (libraries or frameworks) before and you wondered what are these files and what they are for. In TypeScript they are called Type Declaration files. Let&amp;rsquo;s find out what is that practically.
Let&amp;rsquo;s create a simple example with TypeScript code. Create a folder with the name typescript-type-defs or whatever name you want and then let&amp;rsquo;s create a file called users-list.</description>
      
        
            <type>blog post</type>
        
      
      
      
    </item>
    
    <item>
      <title>Detecting Errors Before Running Code With TypeScript</title>
      <link>http://localhost:1313/detecting-errors-before-running-code-with-typescript/</link>
      <pubDate>Mon, 10 May 2021 21:10:00 +0000</pubDate>
      
      <guid>http://localhost:1313/detecting-errors-before-running-code-with-typescript/</guid>
      <description>The problem In the previous post we talked about what is TypeScript and why should we use that. Now it&amp;rsquo;s time to go to practice.
We need to know how to start using TypeScript in our JavaScript project. In examples of this post series, I will use mostly code that written in Node environment. It won&amp;rsquo;t be any specific code that is understandable for only developers who worked with Node before.</description>
      
        
            <type>blog post</type>
        
      
      
      
    </item>
    
    <item>
      <title>How To Install or Update Node by Using nvm (Node Version Manager)</title>
      <link>http://localhost:1313/how-to-install-or-update-node-by-using-nvm/</link>
      <pubDate>Sun, 09 May 2021 21:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/how-to-install-or-update-node-by-using-nvm/</guid>
      <description>Intro There are few ways to install Node on your local machine. The most popular way is to install it following official website instructions. But if you use this way you will install just one specific (latest) version of Node. What if you need to install a specific version of Node? Or you need to upgrade from one version to another but only for a short while.
For that purpose, you can use a tool called nvm (Node Version Manager).</description>
      
        
            <type>blog post</type>
        
      
      
      
    </item>
    
    <item>
      <title>TypeScript - What Is All About and Why Should You Use It?</title>
      <link>http://localhost:1313/typescript-what-is-all-about-and-why-should-you-use-it/</link>
      <pubDate>Sat, 08 May 2021 19:50:00 +0000</pubDate>
      
      <guid>http://localhost:1313/typescript-what-is-all-about-and-why-should-you-use-it/</guid>
      <description>What is TypeScript? TypeScript is a JavaScript Superset. It means that TypeScript is a language that is built upon JavaScript. It is based on JavaScript syntax, constructions, advantages (and disadvantages) but it also brings new features, syntax, and capabilities.
What&amp;rsquo;s the purpose of this language? TypeScript brings to developers some features that help to write code on JavaScript easier and safer. One of the most important features that TypeScript provides is Static typing.</description>
      
        
            <type>blog post</type>
        
      
      
      
    </item>
    
    <item>
      <title>Prettier</title>
      <link>http://localhost:1313/prettier/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/prettier/</guid>
      <description> Prettier Code formatter that supports languages JavaScript, HTML, CSS, GraphQL, markdown, and others. Written in JavaScript.
Links Website (prettier.io) GitHub </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Test asynchronous code using Jest</title>
      <link>http://localhost:1313/test-asynchronous-code-using-jest/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/test-asynchronous-code-using-jest/</guid>
      <description>Test asynchronous code using Jest Test code that contains method setTimeout Let&amp;rsquo;s say we have some function that called another function after N seconds:
1 2 3 4 5 function completeTask(task: Task) { setTimeout(() =&amp;gt; { task.complete(); }, DELAY); } Okay, now we want to test that method task.complete was called when we called function completeTask:
1 2 3 4 5 6 7 8 9 10 11 12 13 const { completeTask } = require(&amp;#34;.</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Temporal Dead Zone In JavaScript</title>
      <link>http://localhost:1313/temporal-dead-zone-in-javascript/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/temporal-dead-zone-in-javascript/</guid>
      <description> Temporal Dead Zone In JavaScript Links Temporal dead zone (TDZ) (MDN Web Docs) </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Name your mocked function with word &#34;mock&#34;</title>
      <link>http://localhost:1313/name-your-mocked-function-with-word-mock/</link>
      <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/name-your-mocked-function-with-word-mock/</guid>
      <description>Name your mocked function with word &amp;ldquo;mock&amp;rdquo; Let&amp;rsquo;s look at the example:
1 2 3 4 5 6 7 8 9 10 11 const fakeApi = jest.fn().mockImplementation(() =&amp;gt; ({ ok({ data: [] }) })); jest.mock(&amp;#39;../some-module.js&amp;#39;, () =&amp;gt; { return jest.fn().mockImplementation(function () { this.api = fakeApi; }); }); It&amp;rsquo;s a part of the test where we mock some module. We also use mocked function &amp;ldquo;fakeApi&amp;rdquo; in the mock of module. But it will not work because function &amp;ldquo;fakeApi&amp;rdquo; will be in Temporal Dead Zone In JavaScript.</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>@testing-library</title>
      <link>http://localhost:1313/@testing-library/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/@testing-library/</guid>
      <description> @testing-library It is a library that provides an ability to write tests. Actually it is a bunch of libraries, each of them has specific target for testing. For example, @testing-library/react, which is specializing on testing React components.
Links react-testing-library (GitHub) testing-library.com </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>create-react-app</title>
      <link>http://localhost:1313/create-react-app/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/create-react-app/</guid>
      <description> create-react-app It is a command-line interface that provides an ability to create simple React application as a starting point of creating the application that you need.
Usage Quick start
1 2 3 npx create-react-app my-app cd my-app npm start Links create-react-app.dev GitHub </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>npx</title>
      <link>http://localhost:1313/npx/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/npx/</guid>
      <description> npx npx is a package runner of npm packages. It comes with npm by default.
It is used for installing npm package. There are some differences between npx and npm install:
downloads the latest version of X package every time It is not dependent on when your X package is installed Also it doesn&amp;rsquo;t install package on your machine </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>First Steps in Unit Testing with TypeScript</title>
      <link>http://localhost:1313/first-steps-in-unit-testing/</link>
      <pubDate>Sun, 18 Apr 2021 23:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/first-steps-in-unit-testing/</guid>
      <description>Unit testing is one of the greatest ways to write effective code. In this article, I want to introduce you to what is this type of testing exactly and some basic terms of the Unit testing world.
Because I work mostly with TypeScript and React ecosystems, I will refer to tools and examples that are commonly used there, but terms and definitions in this article are applicable to all languages and technologies.</description>
      
        
            <type>blog post</type>
        
      
      
      
    </item>
    
    <item>
      <title>Cypress</title>
      <link>http://localhost:1313/cypress/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/cypress/</guid>
      <description> Cypress A library that provides an ability of:
Setup tests Write tests Running tests Recording tests Links GitHub cypress.io </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Don&#39;t use arrow function inside mockImplementation with this (Jest)</title>
      <link>http://localhost:1313/dont-use-arrow-function-inside-mockimplementation-with-this-jest/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/dont-use-arrow-function-inside-mockimplementation-with-this-jest/</guid>
      <description>Don&amp;rsquo;t use arrow function inside mockImplementation with this (Jest) When using the arrow function:
1 2 3 4 5 6 7 8 // ... someAPI.JWT = jest.fn().mockImplementation(() =&amp;gt; { this.authorize = jest.fn(); this.credentials = { access_token: &amp;#34;fake_access_token&amp;#34; }; }); // ... const jwtInstance = someAPI.JWT.mock.instances[0]; console.log(jwtInstance); // mockConstructor When using function:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // .</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Playwright</title>
      <link>http://localhost:1313/playwright/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/playwright/</guid>
      <description> Playwright Playwright is Node library that provides ability to write End-to-End tests and automate Chromium, Firefox and WebKit with a single API.
Links GitHub playwright.dev </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Puppeteer</title>
      <link>http://localhost:1313/puppeteer/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/puppeteer/</guid>
      <description> Puppeteer Puppeteer is a Node library that provides API to control Chrome-based browser by DevTools protocol.
Links GitHub pptr.dev </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Debugging in Jest</title>
      <link>http://localhost:1313/debugging-in-jest/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/debugging-in-jest/</guid>
      <description> Debugging in Jest Add breakpoint in test:
1 2 3 4 5 6 7 8 it.each` a | b | result ${1} | ${2} | ${3} ${0} | ${4} | ${4} `(&amp;#34;should return $result when a = $a, b = $b&amp;#34;, ({ a, b, result }) =&amp;gt; { debugger; // breakpoint expect(sum(a, b)).toBe(result); }); Run this following command:
1 node --inspect-brk ./node_modules/.bin/jest ./&amp;lt;file_of_test&amp;gt;.test.js </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Test of async method in Jest</title>
      <link>http://localhost:1313/test-of-async-method-in-jest/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/test-of-async-method-in-jest/</guid>
      <description>Test of async method in Jest An example of code:
1 2 3 4 5 6 7 8 9 10 module.exports = { checkUser: (user, cb) =&amp;gt; { if (user.age &amp;lt; 18) { setTimeout(() =&amp;gt; { // do smth cb(user.age); }, 500); } }, }; If you write test like this:
1 2 3 4 5 6 7 8 9 10 11 12 13 describe(&amp;#34;example&amp;#34;, () =&amp;gt; { it(&amp;#34;First test&amp;#34;, () =&amp;gt; { expect.</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>The problem with mutation of object data in Jest</title>
      <link>http://localhost:1313/the-problem-with-mutation-of-object-data-in-jest/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/the-problem-with-mutation-of-object-data-in-jest/</guid>
      <description>The problem with mutation of object data in Jest Let&amp;rsquo;s say we have some method that just set fields like this:
1 2 3 joinServer({ host, user }) { user.serverId = host.serverId; } Here is the example of test of this method:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 it(&amp;#34;should move user to host&amp;#39;s server&amp;#34;, () =&amp;gt; { const user1 = { id: 1, serverId: 1, }; const user2 = { id: 2, serverId: 2, }; joinServer({ host: user1, user: user2, }); expect(user2.</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Using &#34;table&#34; in method it.each of Jest</title>
      <link>http://localhost:1313/using-table-in-method-it.each-of-jest/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/using-table-in-method-it.each-of-jest/</guid>
      <description> Using &amp;ldquo;table&amp;rdquo; in method it.each of Jest test.each`table`(name, fn, timeout)
1 2 3 4 5 6 7 it.each` a | b | result ${1} | ${2} | ${3} ${0} | ${4} | ${4} `(&amp;#34;should return $result when a = $a, b = $b&amp;#34;, ({ a, b, result }) =&amp;gt; { expect(sum(a, b)).toBe(result); }); </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>ava.js</title>
      <link>http://localhost:1313/ava.js/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/ava.js/</guid>
      <description> ava.js Ava is a JavaScript test runner for Node
Links GitHub repo </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Browser Object Model</title>
      <link>http://localhost:1313/browser-object-model/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/browser-object-model/</guid>
      <description> Browser Object Model BOM is a browser&amp;rsquo;s API interfaces Additional objects, provided by browser to work with everything, except document Examples Window.navigator (MDN Web Docs) </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Chai.js</title>
      <link>http://localhost:1313/chai.js/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/chai.js/</guid>
      <description> Chai.js The assertion library that can be used with any JavaScript testing framework.
Links chaijs.com </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Document Object Model</title>
      <link>http://localhost:1313/document-object-model/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/document-object-model/</guid>
      <description> Document Object Model DOM is a programming interface for HTML and XML documents.
Links Introduction to the DOM (MDN Web Docs) </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>JSDOM</title>
      <link>http://localhost:1313/jsdom/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/jsdom/</guid>
      <description> JSDOM JSDOM is a JavaScript implementation of Document Object Model and Browser Object Model for Node
Links GitHub repo </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>mocha.js</title>
      <link>http://localhost:1313/mocha.js/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/mocha.js/</guid>
      <description> mocha.js Mocha is a JavaScript test framework running on Node
Links mochajs.org </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Rewire</title>
      <link>http://localhost:1313/rewire/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/rewire/</guid>
      <description> Rewire The library that provides the ability to do monkey-patching
Links GitHub repo </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Jest</title>
      <link>http://localhost:1313/jestjs/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/jestjs/</guid>
      <description>Jest It&amp;rsquo;s a JavaScript Testing Framework. It works with: TypeScript, React, Node, etc. It contains functionality of Test Runner Links GitHub repo (facebook/jest) Official website (jestjs.io) Examples Test of async method in Jest The problem with mutation of object data in Jest Using &amp;ldquo;table&amp;rdquo; in method it.each of Jest Debugging in Jest Don&amp;rsquo;t use arrow function inside mockImplementation with this (Jest) Name your mocked function with word &amp;ldquo;mock&amp;rdquo; Test asynchronous code using Jest Terminology mock (jest.</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>RxJS</title>
      <link>http://localhost:1313/rxjs/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/rxjs/</guid>
      <description> RxJS It&amp;rsquo;s a reactive programming library for JavaScript.
Links GitHub repo (ReactiveX/rxjs) Official website (rxjs.dev) </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Creating GatsbyJS theme</title>
      <link>http://localhost:1313/creating-gatsbyjs-theme/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/creating-gatsbyjs-theme/</guid>
      <description>Creating GatsbyJS theme Note about how to make theme for GatsbyJS
make folder
1 mkdir gatsby-&amp;lt;name&amp;gt;-theme-workspace &amp;amp;&amp;amp; cd &amp;lt;gatsby-your-new-theme&amp;gt; initialize npm/Yarn new project
1 yarn init in package.json:
1 2 3 4 5 6 7 8 { ... &amp;#34;private&amp;#34;: true, &amp;#34;workspaces&amp;#34;: [ &amp;#34;example&amp;#34;, // example of the gatsby website that will use theme &amp;#34;gatsby-&amp;lt;name&amp;gt;-theme&amp;#34; // folder where is your theme is located ] } setup theme folder
1 2 cd gatsby-&amp;lt;name&amp;gt;-theme yarn init setup example website folder</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Yarn</title>
      <link>http://localhost:1313/yarn/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/yarn/</guid>
      <description>Yarn Yarn is a package manager for JavaScript and TypeScript. It is a alternative to npm
Links yarnpkg.com Workspaces Yarn provide a solution to manage Monorepo - Yarn Workspaces
Basically a Monorepo manager in comparison with Lerna.js Yarn Workspaces are low-level Setup from scratch Source: yarn-workspaces-sample (GitHub) 1 mkdir yarn-workspaces-sample &amp;amp;&amp;amp; cd yarn-workspaces-sample &amp;amp;&amp;amp; touch package.json 1 2 3 4 5 6 7 // package.json { &amp;#34;private&amp;#34;: true, &amp;#34;workspaces&amp;#34;: [ &amp;#34;packages/*&amp;#34; ] } 1 mkdir packages &amp;amp;&amp;amp; mkdir packages/server &amp;amp;&amp;amp; mkdir packages/utils 1 2 cd packages/utils &amp;amp;&amp;amp; yarn init -y cd .</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>TypeScript</title>
      <link>http://localhost:1313/typescript/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/typescript/</guid>
      <description> TypeScript TypeScript is a superset of JavaScript that provides you to write JavaScript code with static typing (optionally).
Interesting projects:
type-challenges Links GitHub repo (Microsoft/TypeScript) Official website (typescriptlang.org) Core Types number example: 0, 1, 2.5 string example: &amp;ldquo;str1&amp;rdquo;, &amp;lsquo;str2&amp;rsquo;, `str3` boolean example: true, false </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Creating a post&#39;s page in GatsbyJS</title>
      <link>http://localhost:1313/creating-a-post-page-in-gatsbyjs/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/creating-a-post-page-in-gatsbyjs/</guid>
      <description>Creating a post&amp;rsquo;s page in GatsbyJS Post page component Create a component for post page (temporary with basic jsx w/o any data)
1 2 3 4 5 6 7 8 9 10 11 12 13 import React from &amp;#34;react&amp;#34; import Layout from &amp;#34;./Layout&amp;#34; const PostLayout = () =&amp;gt; { return ( &amp;lt;Layout&amp;gt; &amp;lt;h1&amp;gt;Some Post&amp;lt;/h1&amp;gt; &amp;lt;/Layout&amp;gt; ) } export default PostLayout gatsby-node.ts In gatsby-node.ts you should use createPages GatsbyJS method and set path to this component</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>How to set up GatsbyJS with TypeScript</title>
      <link>http://localhost:1313/how-to-set-up-gatsbyjs-with-typescript/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/how-to-set-up-gatsbyjs-with-typescript/</guid>
      <description>How to set up GatsbyJS with TypeScript First things Install TypeScript as dependency:
npm: 1 npm i typescript --save-dev yarn 1 yarn add typescript -D After installing, you should initialize TypeScript project by generating tsconfig.json file
1 tsc --init Because in GatsbyJS you are using React components that includes JSX you should set specific parameter in tsconfig.json:
1 2 3 4 5 6 { &amp;#34;compilerOptions&amp;#34;: { .... &amp;#34;jsx&amp;#34;: &amp;#34;react&amp;#34;, } } If you want to use TypeScript for your src/ files you can easily just rename all files in src/ from .</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Basic example of GraphQL in GatsbyJS</title>
      <link>http://localhost:1313/basic-example-of-graphql-in-gatsbyjs/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/basic-example-of-graphql-in-gatsbyjs/</guid>
      <description>Basic example of GraphQL in GatsbyJS GraphQL editor is available in your local GatsbyJS app on http://localhost:8000/__graphql
In the editor you can write a query and you will get information from API&amp;rsquo;s that based on this written query
Example
1 2 3 4 5 { site { } } site is like an object/schema that contains some information about your website. For example, it contains information about siteMetadata (that you configured in gatsby-config.</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>GatsbyJS - Adding the display of post&#39;s list in the app</title>
      <link>http://localhost:1313/gatsbyjs---adding-the-display-of-posts-list-in-the-app/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/gatsbyjs---adding-the-display-of-posts-list-in-the-app/</guid>
      <description>GatsbyJS - Adding the display of post&amp;rsquo;s list in the app gatsby-source-filesystem (plugin) This plugin provides the access to app&amp;rsquo;s file-system. It adds specific nodes in GraphQL scheme of the app
Installation Install gatsby-source-filesystem in your GatsbyJS app
npm install gatsby-source-filesystem set up plugin in gatsby-config.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // gatsby-config.js { ... plugins: [ ... { resolve: `gatsby-source-filesystem`, options: { path: `${__dirname}/src/posts`, name: &amp;#34;posts&amp;#34;, }, }, ] } Create the post Create markdown post in /src/posts, for example greetings.</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>ECMAScript</title>
      <link>http://localhost:1313/ecmascript/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/ecmascript/</guid>
      <description>ECMAScript ECMAScript it is a programming-language and also it is a standard of JavaScript programming language. It has own specification.</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Gatsby.js</title>
      <link>http://localhost:1313/gatsbyjs/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/gatsbyjs/</guid>
      <description>Gatsby.js gatsbyjs.com
Gatsby.js is a static site generator written in JavaScript for React
Quick Start Gatsby CLI To start making your application you should install gatsby-cli globally by these npm command:
1 npm install -g gatsby-cli To check that gatsby-cli was successfully installed just use this command that should return version of gatsby-cli on your computer:
1 gatsby --version Creating a new Gatsby application To create a new Gatsby application use command:</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>http://localhost:1313/javascript/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/javascript/</guid>
      <description> JavaScript JavaScript is programming language that it described by these criteria&amp;rsquo;s:
high-level language dynamic type system multi-paradigm language designed by @BrendanEich conforms to ECMAScript specification </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Node</title>
      <link>http://localhost:1313/node/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/node/</guid>
      <description> Node.js Node.js is a JavaScript runtime that is based on Chrome&amp;rsquo;s V8 Engine
Links GitHub repo (nodejs/node) Official website (nodejs.org) </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>npm</title>
      <link>http://localhost:1313/npm/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/npm/</guid>
      <description> npm npm is a tool for managing JavaScript module&amp;rsquo;s dependencies. It is a package manager for JavaScript and TypeScript. It might be already installed with Node on your computer.
Links npmjs.com </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>React</title>
      <link>http://localhost:1313/react/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/react/</guid>
      <description> React React is a JavaScript library for building user interface.
Links GitHub repo (facebook/react) Official website (reactjs.org) </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>JSON</title>
      <link>http://localhost:1313/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/json/</guid>
      <description>JSON JSON (JavaScript Object Notation) is a language-independent data format.</description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Lerna.js</title>
      <link>http://localhost:1313/lerna.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/lerna.js/</guid>
      <description> Lerna.js A tool that provides an ability to manage JavaScript with multiple packages JavaScript Monorepo manager Links lerna.js.org GitHub </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>React Router</title>
      <link>http://localhost:1313/react-router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/react-router/</guid>
      <description> React Router A library (or package) for React that provides an ability to specify routing in your React application in a declarative style.
Links GitHub reactrouter.com </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Rush Stack</title>
      <link>http://localhost:1313/rush-stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/rush-stack/</guid>
      <description> Rush Stack Tools for managing TypeScript monorepos
Projects Rush.js Links GitHub rushstack.io </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Rush.js</title>
      <link>http://localhost:1313/rush.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/rush.js/</guid>
      <description> Rush.js A TypeScript Monorepo manager Part of the Rush Stack Links rushjs.io </description>
      
        <type>note</type>
      
      
      
    </item>
    
    <item>
      <title>Webpack</title>
      <link>http://localhost:1313/webpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/webpack/</guid>
      <description> Webpack It is a JavaScript module bundler. It bundles modules (.js, .scss, .jpg, and others) with dependencies into static assets that are used as output code of an app.
Links GitHub webpack.js.org </description>
      
        <type>note</type>
      
      
      
    </item>
    
  </channel>
</rss>
